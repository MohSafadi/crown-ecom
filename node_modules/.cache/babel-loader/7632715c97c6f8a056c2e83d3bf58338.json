{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n//This is the Config that directly connects to your specific account and project \nconst firebaseConfig = {\n  apiKey: \"AIzaSyCmPnxIX5UH-_pAhMNLA-JqiqXG5p2P1Cg\",\n  authDomain: \"crwn-clothing-db-c1d5c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-c1d5c\",\n  storageBucket: \"crwn-clothing-db-c1d5c.appspot.com\",\n  messagingSenderId: \"116061936548\",\n  appId: \"1:116061936548:web:3a4811e2f101791c07bf31\"\n};\nconst app = initializeApp(firebaseConfig);\n\n//The google provider gives us access to the google API\nconst googleProvider = new GoogleAuthProvider();\n\n//This code forces the select account popup to appear even if you only have one account\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\n\n//Authentication Code:\nexport const auth = getAuth(app);\n//We make a new function that takes the signinwithpopup, which takes auth (OurFirebase ID) and the google provider\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\n\n//Database code, we initialize firestore and set it in a const called db\nexport const db = getFirestore();\n\n//The below async function takes userAuth, and additional info to create the user.\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n\n  //we will use \"doc\" to define the db, the collection name and what we are looknig for in the collection\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  //we check if we actually have the userDocRef in our database\n  const userSnapshot = await getDoc(userDocRef);\n\n  //if the docref doesnt exist(no user in db), we destructure the userAuth, which is what we passed in the parent function\n  //We take the name, email and we also create a new const that saves the current time.\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    //because its async function we use try and catch, to set the document with takes the docref and we define what we need as an object\n    //additional info is the 2nd argument we passed in this function, which will be used in emal and pass sign in, so it can save the display name.\n    //we spread it at the end so it overwrites the initial empty string in display name \n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  //we end this with returning userdocref so that this function always returns a user when executed.\n  return userDocRef;\n};\n\n//below are two functions that are used for creating and signing in the user with email and pass\n//they take the same params.\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const SignOut = () => signOut(auth);\n_c = SignOut;\nvar _c;\n$RefreshReg$(_c, \"SignOut\");","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","SignOut","_c","$RefreshReg$"],"sources":["/Users/mohsafadi/Desktop/WebDev Journey/React/crwn-clothing-v2/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n} from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n\n//This is the Config that directly connects to your specific account and project \nconst firebaseConfig = {\n  apiKey: \"AIzaSyCmPnxIX5UH-_pAhMNLA-JqiqXG5p2P1Cg\",\n  authDomain: \"crwn-clothing-db-c1d5c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-c1d5c\",\n  storageBucket: \"crwn-clothing-db-c1d5c.appspot.com\",\n  messagingSenderId: \"116061936548\",\n  appId: \"1:116061936548:web:3a4811e2f101791c07bf31\"\n};\n\nconst app = initializeApp(firebaseConfig);\n\n//The google provider gives us access to the google API\nconst googleProvider = new GoogleAuthProvider();\n\n//This code forces the select account popup to appear even if you only have one account\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account',\n});\n\n//Authentication Code:\nexport const auth = getAuth(app);\n//We make a new function that takes the signinwithpopup, which takes auth (OurFirebase ID) and the google provider\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\n\n//Database code, we initialize firestore and set it in a const called db\nexport const db = getFirestore();\n\n\n//The below async function takes userAuth, and additional info to create the user.\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n\n  //we will use \"doc\" to define the db, the collection name and what we are looknig for in the collection\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  //we check if we actually have the userDocRef in our database\n  const userSnapshot = await getDoc(userDocRef);\n\n\n  //if the docref doesnt exist(no user in db), we destructure the userAuth, which is what we passed in the parent function\n  //We take the name, email and we also create a new const that saves the current time.\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    //because its async function we use try and catch, to set the document with takes the docref and we define what we need as an object\n    //additional info is the 2nd argument we passed in this function, which will be used in emal and pass sign in, so it can save the display name.\n    //we spread it at the end so it overwrites the initial empty string in display name \n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  //we end this with returning userdocref so that this function always returns a user when executed.\n  return userDocRef;\n};\n\n\n//below are two functions that are used for creating and signing in the user with email and pass\n//they take the same params.\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\nexport const SignOut = () => signOut(auth);"],"mappings":"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"},"metadata":{},"sourceType":"module"}